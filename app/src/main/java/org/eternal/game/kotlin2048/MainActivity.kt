package org.eternal.game.kotlin2048

import androidx.appcompat.app.AppCompatActivity
import android.graphics.Color
import android.os.Bundle
import android.view.View
import android.widget.Button
import android.widget.RelativeLayout
import android.widget.TextView

/*  Author of this improved version: Mārcis Teodors Upenieks  // email: marcisreb@gmail.com
*
*   Original (Incomplete project) this one is built upon -> https://github.com/Obdormio/2048-android-kotlin
*   You can compare this repo for code that I have written on top.
*
*   Features that were already built by original author:
*       - Game Board Foundation
*       - One rectangle that was generated by default
*       - Cool animation (Still trying to figure out how it animates :])
*       - File structure (
*               UnitManager: class that creates Rectangles and updates the game state,
*               RectUnit: holds color and position properties, etc
*         )
*   Features/add-ons I implemented:
*       - Game Logic (Collision detection and rectangle position change depending on swipe direction)
*       - Changed and added different colors for rectangles
*       - Added score textView and Button for reset (If game reaches state where board is full of rectangles without possible moves)
*       - Had to change SDK version to 30 and rebuild project since original was from 2018 and had 28 as sdk version.
*
*   Things I tried but didn't succeed with:
*       - Original author used drawing on Canvas so there is no use of activity_main.xml as in our learning material.
*           So trying to combine these two was nightmare/or maybe it is not, because this is my very first time developing on android platform.
*       - Since there is no xml file, instead of data binding or using something called kotlin extensions
*           I brute forced Context down from MainActivity trough GameView to UnitManager to access getString().
*           Also passed scoreView to GameView but there is obviously a better way. Just didn't find it yet. :/
*
* */

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        // Init Content view
        super.onCreate(savedInstanceState)

        // Setup relative layout
        val relativeLayout = RelativeLayout(this@MainActivity).apply {
            setPadding(15, 50, 15, 15)
            setBackgroundColor(Color.GRAY)
        }

        val resetButton = Button(this@MainActivity)
        resetButton.id = R.id.btnId
        resetButton.visibility = View.VISIBLE
        resetButton.text = getString(R.string.btn_text)
        resetButton.textSize = 18f
        resetButton.setPadding(40, 40, 40, 40)

        val resetBtnParam = RelativeLayout.LayoutParams(
                RelativeLayout.LayoutParams.WRAP_CONTENT,
                RelativeLayout.LayoutParams.WRAP_CONTENT
        ).apply {
            addRule(RelativeLayout.ALIGN_PARENT_RIGHT)
            addRule(RelativeLayout.ALIGN_PARENT_TOP)
        }

        // Initialize ScoreView
        val scoreView = TextView(this@MainActivity)
        scoreView.id = R.id.scoreId
        scoreView.visibility = View.VISIBLE
        scoreView.text = getString(R.string.score_text, 0)
        scoreView.textSize = 24f

        scoreView.setPadding(50, 100, 50, 200)
        val scoreViewParam = RelativeLayout.LayoutParams(
                RelativeLayout.LayoutParams.WRAP_CONTENT,
                RelativeLayout.LayoutParams.WRAP_CONTENT
        ).apply {
            addRule(RelativeLayout.ALIGN_PARENT_TOP)
            addRule(RelativeLayout.ALIGN_PARENT_LEFT)
        }

        // Initialize gameView and gameManager
        val gameView = GameView(this@MainActivity, scoreView)
        val gameManager = gameView.unitManager
        val gameViewParam = RelativeLayout.LayoutParams(
                RelativeLayout.LayoutParams.WRAP_CONTENT,
                RelativeLayout.LayoutParams.WRAP_CONTENT
        ).apply {
            addRule(RelativeLayout.CENTER_IN_PARENT)
        }

        relativeLayout.addView(scoreView, scoreViewParam)
        relativeLayout.addView(resetButton, resetBtnParam)
        relativeLayout.addView(gameView, gameViewParam)

        // Set current content view to use created Relative layout
        setContentView(relativeLayout)

        // Start Game
        gameManager.start()

        resetButton.setOnClickListener {
            gameManager.resetGameState()
        }
    }
}
